/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'globit' at '8/29/15 9:01 AM' with Gradle 2.4
 */
def vJavaLang = '1.8'
def javaProjects = [project(':tiger-core'), project(':tiger-common-util'), project(':tiger-common-dal'),
                    project(':tiger-biz'), project(':tiger-web-api'),
                    project(':tiger-biz-mng'), project(':tiger-web-mng'), project(':tiger-kafka')]

buildscript {
//    ext.springRepo = 'http://maven.oschina.net/content/groups/public/'
    ext.springRepo = "http://repo.maven.apache.org/maven2/"

    repositories {
        maven { url springRepo }
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE"
        classpath 'org.springframework:springloaded:1.2.4.RELEASE'
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.2' // see deploy.gradle
    }
}



configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

configure(javaProjects) {
    apply plugin: 'java'
    //apply plugin: 'checkstyle'
    compileJava.options.encoding = 'UTF-8'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }

    repositories {
        maven { url springRepo }
    }

//    checkstyle {
//        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
//    }

//    checkstyleMain {
//        doLast {
//            ant.xslt(in: "$buildDir/reports/checkstyle/main.xml",
//                    style:rootProject.file('config/checkstyle/checkstyle.xsl'),
//                    out:"$buildDir/reports/checkstyle/checkstyle.html"
//            )
//        }
//    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        compile 'org.projectlombok:lombok'
        compile 'org.springframework.boot:spring-boot-starter-log4j'
        testCompile 'junit:junit'
        testCompile 'org.springframework:spring-test'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
        testCompile 'org.objenesis:objenesis'
    }


    configurations {
        all*.exclude module: 'spring-boot-starter-logging'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.importorder.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }

}

